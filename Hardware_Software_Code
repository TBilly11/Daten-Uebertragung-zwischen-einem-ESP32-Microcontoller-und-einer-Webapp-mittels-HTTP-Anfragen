// Hardware ////////////////////////////////////


#include <WiFi.h>
#include <HTTPClient.h>
#include <SPI.h>
#include <MFRC522.h>
#include <string.h>
#include <ArduinoJson.h>
#include <ESP32Servo.h>
 
#define SS_PIN 21
#define RST_PIN 22
MFRC522 mfrc522(SS_PIN, RST_PIN);


#include "FS.h"
#include <TFT_eSPI.h>      // Hardware-spezifische Bibliothek
TFT_eSPI tft = TFT_eSPI(); // Benutzerdefinierte Bibliothek aufrufen
// Dies ist der Dateiname, der zur Speicherung der Kalibrierungsdaten verwendet wird
// Sie können dies ändern, um neue Kalibrierungsdateien zu erstellen.
// Der SPIFFS-Dateiname muss mit "/" beginnen.
#define CALIBRATION_FILE "/TouchCalData1"




// Setzen Sie REPEAT_CAL auf true anstelle von false, um die Kalibrierung
// erneut auszuführen, sonst wird sie nur einmal ausgeführt.
// Führen Sie die Kalibrierung erneut aus, wenn Sie die Bildschirmrotation ändern.
#define REPEAT_CAL false




// Startposition der Tastatur, Größe und Abstand der Tasten
#define KEY_X 40 // Mitte der Taste
#define KEY_Y 96
#define KEY_W 62 // Breite und Höhe
#define KEY_H 30
#define KEY_SPACING_X 18 // X- und Y-Abstand
#define KEY_SPACING_Y 20
#define KEY_TEXTSIZE 1   // Schriftgrößenmultiplikator




// Zwei Schriftarten werden verwendet, da Zahlen in Fettdruck schön aussehen
#define LABEL1_FONT &FreeSansOblique12pt7b // Schriftart für Tastenbeschriftung 1
#define LABEL2_FONT &FreeSansBold12pt7b    // Schriftart für Tastenbeschriftung 2




// Größe und Position des numerischen Anzeigefelds
#define DISP_X 1
#define DISP_Y 10
#define DISP_W 238
#define DISP_H 50
#define DISP_TSIZE 3
#define DISP_TCOLOR TFT_CYAN




// Nummernlänge, Puffer zum Speichern und Zeichenindex
#define NUM_LEN 12
char numberBuffer[NUM_LEN + 1] = "";
uint8_t numberIndex = 0;




// Es gibt eine Statuszeile für Nachrichten
#define STATUS_X 120 // Zentriert darauf
#define STATUS_Y 65




// Erstellen Sie 15 Tasten für die Tastatur
char keyLabel[15][5] = {"Neu", "X", "Send", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "0", "#" };
uint16_t keyColor[15] = {TFT_RED, TFT_DARKGREY, TFT_DARKGREEN,
                         TFT_BLUE, TFT_BLUE, TFT_BLUE,
                         TFT_BLUE, TFT_BLUE, TFT_BLUE,
                         TFT_BLUE, TFT_BLUE, TFT_BLUE,
                         TFT_BLUE, TFT_BLUE, TFT_BLUE
                        };




// Rufen Sie die TFT_eSPI-Button-Klasse auf und erstellen Sie alle Button-Objekte
TFT_eSPI_Button key[15];




//------------------------------------------------------------------------------------------


const char* ssid = "TP-Link_C2E4";
const char* password = "68365202";
//globale Variablen
String NFC_Code="";
String payload1;
String payload2;
String payload3;
String response2;
String response1;
bool oneFactor_statut;
char one_factor_code[13];
int password_6;
bool check = 0;
char password_6_str[7];
uint8_t b;
const int gruen_LED = 12;
const int rot_LED = 14;
// Erstellen  ein JSON-Objekt
StaticJsonDocument<200> doc1;
StaticJsonDocument<200> doc2;
Servo meinServo;




void setup() {


  Serial.begin(9600);
  SPI.begin();
  mfrc522.PCD_Init();
  Serial.println("Bringen Sie Ihre Karte in die Nähe des Lesegeräts...");
  Serial.println();


  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Verbindung zum WiFi wird hergestellt...");


  // Setze Pin-Modi für LEDs
  pinMode(gruen_LED, OUTPUT);
  pinMode(rot_LED, OUTPUT);
 
  // Initialisiere TFT-Bildschirm
  tft.init();


  // Setze die Drehung, bevor man kalibriert
  tft.setRotation(0);


  // Kalibriere den Touchscreen und rufe die Skalierungsfaktoren ab
  touch_calibrate();


  // Lösche den Bildschirm
  tft.fillScreen(TFT_BLACK);


  // Zeichne Hintergrund für Tastenfeld
  tft.fillRect(0, 0, 240, 320, TFT_DARKGREY);


  // Zeichne Anzeigebereich und Rahmen für Zahlenanzeige
  tft.fillRect(DISP_X, DISP_Y, DISP_W, DISP_H, TFT_BLACK);
  tft.drawRect(DISP_X, DISP_Y, DISP_W, DISP_H, TFT_WHITE);


  // Analysiere den Inhalt
  // Zeichne Tastenfeld
  drawKeypad();


  meinServo.attach(13);  // Befestige den Servomotor am Pin 13
  meinServo.write(0);    // Initialisiere den Servomotor auf 0 Grad
}
}






void keypad_pin(){
 
  uint16_t t_x = 0, t_y = 0; // Variablen für die Touch-Koordinaten speichern




  // Wenn ein gültiger Touch auf dem Bildschirm stattfindet, wird "pressed" auf true gesetzt
  bool pressed = tft.getTouch(&t_x, &t_y);




  // Überprüfen, ob die Touch-Koordinaten in irgendeiner Key-Box enthalten sind
  for ( b = 0; b < 15; b++) {               //uint8_t
    if (pressed && key[b].contains(t_x, t_y)) {
      key[b].press(true);  // Button wird als gedrückt markiert
    } else {
      key[b].press(false);  // Button wird als nicht gedrückt markiert
    }
  }




  // Überprüfen, ob ein Key den Status geändert hat
  for (b = 0; b < 15; b++) {




    if (b < 3) tft.setFreeFont(LABEL1_FONT);
    else tft.setFreeFont(LABEL2_FONT);




    if (key[b].justReleased()) key[b].drawButton();     // Normalen Button anzeigen




    if (key[b].justPressed()) {
      key[b].drawButton(true);  // Invertierten Button anzeigen




      // Wenn ein Zahlen-Button gedrückt wurde, wird die entsprechende Zahl dem numberBuffer hinzugefügt
      if (b >= 3) {
        if (numberIndex < NUM_LEN) {
          numberBuffer[numberIndex] = keyLabel[b][0];
          numberIndex++;
          numberBuffer[numberIndex] = 0; // Null-Terminator hinzufügen
        }
        status(""); // Alten Status löschen
      }




      // Löschen-Button, um das letzte Zeichen zu löschen
      if (b == 1) {
        numberBuffer[numberIndex] = 0;
        if (numberIndex > 0) {
          numberIndex--;
          numberBuffer[numberIndex] = 0;//' ';
        }
        status(""); // Alten Status löschen
      }




      if (b == 2) { // Wenn ein Text im Feld "numberBuffer" eingegeben wurde und die Sendetaste gedrückt wurde
status("Sent value to serial port"); // Statusmeldung, dass der Wert an den seriellen Anschluss gesendet wurde
Serial.println(numberBuffer); // Ausgabe des Werts im seriellen Monitor


// Wenn der eingegebene Text genau 8 Zeichen hat
if(strlen(numberBuffer)==8){
HTTPClient http; // Erstelle ein HTTPClient-Objekt
http.begin("http://192.168.0.108:8000/api/one_factor_auth"); // Verbinde mit der angegebenen URL
http.addHeader("Content-Type", "application/x-www-form-urlencoded"); // Füge den Header "Content-Type" hinzu
String payload1 = "one_factor_code=" + String (numberBuffer); // Erstelle eine Payload-Zeichenfolge
numberIndex = 0; // Setze den Index des "numberBuffer" auf 0 zurück
numberBuffer[numberIndex] = 0; // Setze den ersten Wert des "numberBuffer" auf null
Serial.println(payload1); // Ausgabe der Payload-Zeichenfolge im seriellen Monitor
int httpCode = http.POST(payload1); // Führe eine HTTP-POST-Anfrage aus und speichere den Statuscode
response1 = http.getString(); // Speichere die Antwort als Zeichenfolge
Serial.println("Response code: " + String(httpCode)); // Ausgabe des HTTP-Statuscodes im seriellen Monitor
Serial.println("Response body: " + response1); // Ausgabe der Antwort im seriellen Monitor
const char* json1 = response1.c_str(); // Konvertiere die Antwort in eine Zeichenfolge
DeserializationError error1 = deserializeJson(doc1, json1); // Führe eine JSON-Deserialisierung aus
if (error1) { // Wenn ein Fehler bei der Deserialisierung auftritt
Serial.print(F("deserializeJson() ist fehlgeschlagen mit dem Fehlercode: ")); // Ausgabe einer Fehlermeldung im seriellen Monitor
Serial.println(error1.c_str()); // Ausgabe des Fehlercodes im seriellen Monitor
return; // Beende die Funktion
}
oneFactor_statut = doc1["one_factor"]; // Speichere den Wert des Schlüssels "one_factor" aus dem JSON-Objekt
String code = doc1["one_factor_code"].as<String>(); // Konvertiere den Wert des Schlüssels "one_factor_code" in eine Zeichenfolge
strncpy(one_factor_code, code.c_str(), sizeof(one_factor_code)); // Kopiere die Zeichenfolge in das Array "one_factor_code"
http.end(); // Schließe die HTTP-Verbindung
}




if(strlen(numberBuffer)==6){
    const char* json2 = response2.c_str();
    DeserializationError error2 = deserializeJson(doc2, json2);
    if (error2) {
        Serial.print(F("deserializeJson() a échoué avec le code : "));
        Serial.println(error2.c_str());
        return;
    }
    const char* password_str = doc2["password"];
    password_6 = strtol(password_str, NULL, 10);
    sprintf(password_6_str, "%06d", password_6);
    Serial.println(numberBuffer);Serial.print(password_6_str);
    if(strcmp(numberBuffer, password_6_str) == 0){
        check = true;
        Serial.println(check);
    }
    numberIndex = 0; // Setze den Index zurück auf 0
    numberBuffer[numberIndex] = 0; // Setze Null im Buffer
}




if((check!=1 && oneFactor_statut!=1)){  //||strlen(numberBuffer)==6 && check!=1){
    digitalWrite(rot_LED, HIGH);
    delay(2000);
    digitalWrite(rot_LED, LOW);
}
numberIndex = 0; // Setze den Index zurück auf 0
numberBuffer[numberIndex] = 0; // Setze Null im Buffer
}
     


if (b == 0) {
    status("Wert gelöscht");
    numberIndex = 0; // Setze den Index zurück auf 0
    numberBuffer[numberIndex] = 0; // Setze Null im Buffer
}




// Aktualisieren Sie das Feld für die Anzeige der Nummer
tft.setTextDatum(TL_DATUM);        // Verwenden Sie die obere linke Ecke als Koordinatendatum für den Text
tft.setFreeFont(&FreeSans18pt7b);  // Wählen Sie eine schöne Schriftart, die in das Feld passt
tft.setTextColor(DISP_TCOLOR);     // Setzen Sie die Schriftfarbe




// Zeichnen Sie die Zeichenkette. Der zurückgegebene Wert ist die Breite in Pixeln.
int xwidth = tft.drawString(numberBuffer, DISP_X + 4, DISP_Y + 12);




// Decken Sie jetzt den Rest der Linie ab, indem Sie ein schwarzes Rechteck zeichnen. Kein Flackern auf diese Weise,
// aber es funktioniert nicht mit kursiven oder geneigten Schriftarten aufgrund von Überlappungen.
tft.fillRect(DISP_X + 4 + xwidth, DISP_Y + 1, DISP_W - xwidth - 5, DISP_H - 2, TFT_BLACK);




delay(10); // Entprellen der Benutzeroberfläche




    }
  }
}


void NFC_Reader(){
    NFC_Code="";
    byte letter;
    for (byte i = 0; i < mfrc522.uid.size; i++) {
      NFC_Code.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : ""));
      NFC_Code.concat(String(mfrc522.uid.uidByte[i], HEX));
      NFC_Code.toUpperCase();
    }
    }
   
// Funktion send_PIN_to_User definiert
void send_PIN_to_User(){
  NFC_Reader();
// HTTPClient-Instanz erstellen  
  HTTPClient http;
// HTTP-Anfrage an URL senden
  http.begin("http://192.168.0.108:8000/api/send_mail");
// HTTP-Header hinzufügen
  http.addHeader("Content-Type", "application/x-www-form-urlencoded");
// HTTP-Body (Anfrageparameter) erstellen
  payload2 ="nfc="+NFC_Code;
  Serial.println(payload2);
// HTTP-Anfrage mit dem gegebenen HTTP-Body senden und den HTTP-Statuscode erhalten
  int httpCode = http.POST(payload2);
// HTTP-Antwort (Response) als String abrufen
  response2 = http.getString();
  Serial.println("Response code: " + String(httpCode));
  Serial.println("Response body: " + response2);
  http.end();
  delay(1000);
 
  }


  //--------------------------------------------------------------------


void drawKeypad()
{
  // Zeichne die Tasten
  for (uint8_t row = 0; row < 5; row++) {
    for (uint8_t col = 0; col < 3; col++) {
      uint8_t b = col + row * 3;


      // Wähle die Schriftart basierend auf der Position der Taste aus
      if (b < 3) tft.setFreeFont(LABEL1_FONT);
      else tft.setFreeFont(LABEL2_FONT);


      // Initialisiere und zeichne die Taste
      key[b].initButton(&tft, KEY_X + col * (KEY_W + KEY_SPACING_X),
                        KEY_Y + row * (KEY_H + KEY_SPACING_Y), // x, y, w, h, outline, fill, text
                        KEY_W, KEY_H, TFT_WHITE, keyColor[b], TFT_WHITE,
                        keyLabel[b], KEY_TEXTSIZE);
      key[b].drawButton();
    }
  }
}




//--------------------------------------------------------------------


void touch_calibrate()
{
  uint16_t calData[5];
  uint8_t calDataOK = 0;


  // prüfen ob systemDaten existiert
  if (!SPIFFS.begin()) {
    Serial.println("Formating file system");
    SPIFFS.format();
    SPIFFS.begin();
  }


  // prüft ob Kalibration Daten existiert 
  if (SPIFFS.exists(CALIBRATION_FILE)) {
    if (REPEAT_CAL)
    {
      // löschen wenn man erneut kalibrieren möchte
      SPIFFS.remove(CALIBRATION_FILE);
    }
    else
    {
      File f = SPIFFS.open(CALIBRATION_FILE, "r");
      if (f) {
        if (f.readBytes((char *)calData, 14) == 14)
          calDataOK = 1;
        f.close();
      }
    }
  }


  if (calDataOK && !REPEAT_CAL) {
    // Kalibrationsdaten sind valid
    tft.setTouch(calData);
  } else {
    // Kalibrationsdaten sind nicht valid also rekalibrieren
    tft.fillScreen(TFT_BLACK);
    tft.setCursor(20, 0);
    tft.setTextFont(2);
    tft.setTextSize(1);
    tft.setTextColor(TFT_WHITE, TFT_BLACK);


    tft.println("Touch corners as indicated");


    tft.setTextFont(1);
    tft.println();


    if (REPEAT_CAL) {
      tft.setTextColor(TFT_RED, TFT_BLACK);
      tft.println("Set REPEAT_CAL to false to stop this running again!");
    }


    tft.calibrateTouch(calData, TFT_MAGENTA, TFT_BLACK, 15);


    tft.setTextColor(TFT_GREEN, TFT_BLACK);
    tft.println("Calibration complete!");


    // Daten speichern
    File f = SPIFFS.open(CALIBRATION_FILE, "w");
    if (f) {
      f.write((const unsigned char *)calData, 14);
      f.close();
    }
  }
}


//--------------------------------------------------------------------


// Print something in the mini status bar
void status(const char *msg) {
  tft.setTextPadding(240);
  //tft.setCursor(STATUS_X, STATUS_Y);
  tft.setTextColor(TFT_WHITE, TFT_DARKGREY);
  tft.setTextFont(0);
  tft.setTextDatum(TC_DATUM);
  tft.setTextSize(1);
  tft.drawString(msg, STATUS_X, STATUS_Y);
}


//------------------------------------------------------------------------------------------


void record_login_entry(){
 
  HTTPClient http;


  http.begin("http://192.168.0.108:8000/api/login_entry");
  http.addHeader("Content-Type", "application/x-www-form-urlencoded");


  if(check==1){
     payload3 = "code=" + NFC_Code + "&auth_type=Zwei Faktor-Authentifizierung";
  }
  if(oneFactor_statut==1){
     payload3 = "code="+ String(one_factor_code) + "&auth_type=Ein Faktor-Authentifizierung";
  }
  Serial.println(payload3);
  int httpCode = http.POST(payload3);
 
  String response3 = http.getString();
 
  Serial.println("Response code: " + String(httpCode));
  Serial.println("Response body: " + response3);
  http.end();
  delay(1000);
  }


void mein_Servo_Motor(){
    digitalWrite(gruen_LED, HIGH);
    for (int i = 0; i <= 90; i += 10) {
    meinServo.write(i);    
    delay(100);        
  }
   delay(4000);
   digitalWrite(gruen_LED, LOW);
  delay(4000);          
  for (int i = 90; i >= 0; i -= 10) {
    meinServo.write(i);    
    delay(100);          
  }
  delay(100);            /
 
    }


void loop() {
//wenn der Benutzer stempelt
  if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
  //NFC_Reader();
  send_PIN_to_User(); //die Funktion send_PIN_to_Userwird aufgerufen
   }
   keypad_pin(); //die Funktion keypad_pin wird aufgerufen
//Serial.println(check);
if(check==1 || oneFactor_statut== 1){    
mein_Servo_Motor();  //die Tür wird geöffnet
Serial.println(NFC_Code);
Serial.println(one_factor_code);
record_login_entry(); //die Daten des Benutzers wird im protokoll gespeichert
}
//die Werte auf Null setzen damit sich die endlos öffnet und schlißt
oneFactor_statut = 0;
check=0;
}


//Web-Interface
//Models.py
import base64
import uuid
from django.db import models
from django.contrib.auth.models import AbstractUser
from django.utils.translation import gettext_lazy as _
from django.utils import timezone




# Eine Liste von Optionen für das Attribut user_type
USER_TYPES = (
    ('ADMIN', 'ADMIN'),
    ('REGULAR', 'REGULAR')
)




class MyUser(AbstractUser):
    # Definition der Attribute d
    # User-Typ: Admin oder Regulär
    user_type = models.CharField(max_length=30, choices=USER_TYPES)
    # Email-Adresse des Benutzers
    email = models.EmailField(_('adresse email'), blank=False, unique=True)
    username = models.CharField(max_length=50, unique=True)
    one_factor_auth_enabled = models.BooleanField(default=False)
    # 1-Faktor-Authentifizierungscode des Benutzers
    one_factor_code = models.CharField(max_length=12)
    # NFC-ID des Benutzers (falls vorhanden)
    nfc = models.CharField(max_length=20, null=True)


    EMAIL_FIELD = "email" # Feld für die Email-Adresse
    USERNAME_FIELD = 'username' # Feld für den Benutzernamen
    REQUIRED_FIELDS = ['email'] # Benötigte Felder für die Registrierung
    def get_one_factor_code(self):
        # Funktion zur Rückgabe des entschlüsselten 1-Faktor-Authentifizierungscodes
        return base64.b64decode(bytes(self.one_factor_code[1:], 'utf-8')).decode()




    @classmethod
    def generate_random_etan_password(cls):
        # Funktion zur Generierung eines zufälligen Passworts
        password = cls.objects.make_random_password(length=6)
        return password


class LoginEntry(models.Model):
    # Datum des Login-Eintrags
    date = models.DateTimeField(default=timezone.now)
    # Benutzer, der die Tür geöffnet hat
    user = models.ForeignKey(to=MyUser, on_delete=models.CASCADE, related_name="login_entries")
     # Art der Authentifizierung (NFC oder Passwort)
    auth_type = models.CharField(choices=AUTH_TYPES, max_length=50)




class RecordConfig(models.Model):
    # Anzahl der Datensätze im Protokoll
    nb_records=models.IntegerField(default=10)
//Models.py
from django import forms
from django.contrib.auth.password_validation import validate_password
from django.core.exceptions import ValidationError, MultipleObjectsReturned
from django.utils.translation import gettext_lazy as _
import logging
import base64


from lock_web_interface.models import MyUser


logger = logging.getLogger(__name__)


USER_TYPE_CHOICES = (
    ('ADMIN', 'ADMIN'),
    ('REGULAR_USER', 'REGULAR_USER')
)




class BaseUserForm(forms.Form):
    first_name = forms.CharField(required=True, label=_('Vorname'), widget=forms.TextInput(
        attrs={"class": "form-control input-lg", "placeholder": "Baptiste"}))
    last_name = forms.CharField(required=True, label=_('Name'), widget=forms.TextInput(
        attrs={"class": "form-control input-lg", "placeholder": "Delrue"}))
    email = forms.EmailField(required=True, label=_('Email'), widget=forms.EmailInput(
        attrs={"class": "form-control input-lg", "placeholder": "azerty@gmail.com"}))
   


class AdminForm(BaseUserForm):


    def clean_password1(self):
        password1 = self.data.get('password1', None)
        password2 = self.data.get('password2', None)


        if password1:
            if password1 != password2:
                self.add_error('password2', _('password unterschiedlich'))
            else:
                try:
                    validate_password(password1)
                except ValidationError as val_errors:
                    self.add_error('password1', val_errors)


        else:
            self.add_error('password1', _('muss ausgefüllt werden'))


        return password1


    def save(self):
        try:
            first_name = self.cleaned_data.get('first_name')
            last_name = self.cleaned_data.get('last_name')
            user_type = "ADMIN"
            email = self.cleaned_data.get('email')
            password = self.cleaned_data.get('password1')


            user = MyUser.objects.create_user(
                username=email,
                first_name=first_name,
                last_name=last_name,
                email=email,
                user_type=user_type,
                password=password,
                is_active=False
            )
            return user
        except Exception as e:
            logger.error(e)
            raise




class UserForm(BaseUserForm):


    def __init__(self, **kwargs):
        self.user_id = kwargs.pop("user_id")
        super().__init__(**kwargs)
        self.fields['user_id'] = forms.CharField(required=False, widget=forms.HiddenInput(), label="user id",
                                                 initial=self.user_id)
        self.fields.pop('password1')
        self.fields.pop('password2')


    one_factor_code = forms.CharField(required=True, label=_('Code'), widget=forms.TextInput(
        attrs={"class": "form-control input-lg", "placeholder": "Ein Faktor-Authentifizierungscode"}))
    username = forms.CharField(required=True, label=_('Username'), widget=forms.TextInput(
        attrs={"class": "form-control input-lg", "placeholder": "Username"}))
    nfc = forms.CharField(required=True, label=_('Code NFC'), widget=forms.TextInput(
        attrs={"class": "form-control input-lg", "placeholder": "code NFC"}))
   
    def clean(self):
        nfc = self.cleaned_data.get('nfc')
        try:
            MyUser.objects.get(nfc=nfc)
        except MultipleObjectsReturned:
            self.add_error('nfc', "A user with this code already exist")
        except MyUser.DoesNotExist:                                              


            pass
    def save(self):
        try:
            first_name = self.cleaned_data.get('first_name')
            last_name = self.cleaned_data.get('last_name')
            username = self.cleaned_data.get('username')
            user_type = "REGULAR"
            email = self.cleaned_data.get('email')
            password = "azerty123"
            one_factor_code = self.cleaned_data.get('one_factor_code')
            nfc = self.cleaned_data.get('nfc')
            if self.user_id:
                user = MyUser.objects.get(id=self.user_id)
                user.username = username
                user.first_name = first_name
                user.last_name = last_name
                user.email = email
                user.password = password
                user.one_factor_code = base64.b64encode(bytes(one_factor_code, 'utf-8'))
                user.nfc = nfc
                user.save()
            else:
                user = MyUser.objects.create_user(
                    username=username,
                    first_name=first_name,
                    last_name=last_name,
                    email=email,
                    user_type=user_type,
                    password=password,
                    one_factor_code=base64.b64encode(bytes(one_factor_code, 'utf-8')),
                    nfc=nfc,
                    is_active=False
                )
            return user
        except Exception as e:
            logger.error(e)
            raise






################# Admin.py
#Die Klasse ManagementView


import base64
from django.contrib.auth.models import User
from django.core.paginator import Paginator, EmptyPage
from django.http import JsonResponse, QueryDict, HttpResponseRedirect
from django.shortcuts import render
from django.template.loader import render_to_string
from django.urls import reverse
from django.views import View
import logging


from lock_web_interface.forms.user_form import UserForm
from lock_web_interface.models import MyUser, LoginEntry


logger = logging.getLogger(__name__)




class ManagementView(View):


    @classmethod
    def get(cls, request):
        user_page = request.GET.get('page', 1) # Benutzerseite abrufen
        action = request.GET.get('action')      # Aktion abrufen
        if action:
            if action == "next":
                user_page = int(user_page) + 1
            else:
                user_page = int(user_page) - 1
        # Alle regulären Benutzer abrufen und nach Benutzernamen sortieren
        regular_users = MyUser.objects.filter(user_type="REGULAR").order_by('username')
        paginator = Paginator(regular_users, 10)  # 10 Benutzer pro Seite
        try:
        # Paginator-Objekt erstellen, um die Benutzer auf mehrere Seiten aufzuteilen
            user_pages = paginator.page(user_page)
        except EmptyPage:
           # Die Paginator-Seite abrufen, die der Benutzer sehen möchte
           # man muss sich keine Gedanken über PageNotAnInteger machen, da unsere URL-Definition nur Ganzzahlen als Argument "page" zulässt
            user_pages = paginator.page(paginator.num_pages)


         # UserForm-Objekt erstellen, um einen neuen Benutzer hinzuzufügen
        form = UserForm(user_id=None)
        context = {
            "user_pages": user_pages,
            "form": form,
            "action_form": "Hinzufügen"
        }
 # management.html-Template rendern
        return render(request, 'lock_web_interface/management.html', context=context) 


    @classmethod
    def post(cls, request):
        try:
            nb_records = request.POST.get('nb-records', 5)
            logger.info(nb_records)
            request.session['nb_records'] = nb_records
            return cls.get(request)
        except Exception as e:
            logger.error(e)
            return JsonResponse(status=500, data={})



#Die Klasse UserView


class UserView(View):
# Template-Name definieren
    template_name = "lock_web_interface/management/user_template.html" 
    @classmethod
    def get(cls, request):
        try:
# ID des Benutzers aus dem Request auslesen
            user_id = request.GET.get('id') 
 # Benutzerobjekt anhand der ID aus der Datenbank abrufen                             
            user = MyUser.objects.get(id=user_id) 
            logger.info(type(user.one_factor_code))                                   
            logger.info(user.one_factor_code)
 # Initialwerte für das Formular setzen
            initials = {                                            'first_name': user.first_name,
                'last_name': user.last_name,
                'email': user.email,
                'username': user.username,
                'one_factor_code': base64.b64decode(bytes(user.one_factor_code[1:], 'utf-8')).decode(),
                'nfc': user.nfc
            }


            context = {                                                       # Initialwerte für das Formular setzen
                "form": UserForm(initial=initials, user_id=user_id),
                "action_form": "Bearbeiten"
            }
            template = render_to_string(                               # Template-HTML-Code aus dem Template-Datei generieren
                template_name=cls.template_name,
                request=request,
                context=context
            )
            return JsonResponse(status=200, data={'html': template})     # JSON-Antwort mit HTML-Code als Daten zurückgeben
        except Exception as e:
            logger.error(e)
            return JsonResponse(status=500, data={                        # Fehlerfall:Fehlermeldung zurückgeben
                "msg": "an error has occured on our end"
            })
 # POST-Methode definieren
    @classmethod                                          
    def post(cls, request):
        try:
# Formularobjekt aus dem POST-Request erstellen
            form = UserForm(data=request.POST, user_id=request.POST.get('user_id'))   
            logger.info(form.is_bound)                                                # Logging-Ausgabe hinzufügen
            context = {                                                                 # Context-Dictionary für das Template erstellen
                "form": form,
                "action_form": "Bearbeiten" if request.POST.get('user_id') else "Hinzufügen"
            }
 # Wenn das Formular gültig ist,speichern und Erfolgsmeldung zurückgeben


            if form.is_valid():                          
                form.save()
                return JsonResponse(status=200, data={
                    'msg': "user updated with success"
                })
 # Wenn das Formular ungültig ist, Template-HTML-Code mit Formularfehlern  zurückgeben


            else:                                        logger.error(form.errors)
                template = render_to_string(
                    template_name=cls.template_name,
                    request=request,
                    context=context
                )
                return JsonResponse(status=400, data={
                    'msg': "form errors",
                    "html": template
                })
 # Fehlerfall: Exception abfangen und JSON-Antwort mit Fehlermeldung zurückgeben


        except Exception as e:                         logger.error(e)
            return JsonResponse(status=500, data={
                "msg": "an error has occured on our end"
            })
 # DELETE-Methode definieren
    @classmethod                                       
    def delete(cls, request):
        try:
# ID des zu löschenden Benutzers aus dem Request-Body auslesen
            user_id = QueryDict(request.body).get('id')
# Lösche den Benutzer mit der entsprechenden ID aus der Datenbank 
            MyUser.objects.get(id=user_id).delete() 
# eine Erfolgsmeldung zurückgeben     
            return JsonResponse(status=200, data={        
                'msg': "user deleted with success"
})
        except Exception as e:
            logger.error(e)
            return JsonResponse(status=500, data={
                "msg": "an error has occured on our end" })





#### Die Klasse OneAuthUsersView

class OneAuthUsersView(View):


    @classmethod
    def post(cls, request):
 # Extrahiere die Benutzer-ID und die Aktion (aktivieren/deaktivieren) aus dem Body der Anfrage
        try:                                    
            user_id = request.POST.get('id')
            action = request.POST.get('toggled')
# Lade den Benutzer mit der entsprechenden ID aus der Datenbank
            user = MyUser.objects.get(id=user_id)
            logger.info(action)            # Logge die Aktion
# Setze den One-Factor-Auth-Status des Benutzers basierend auf der Aktion
            if action == 'False':
                user.one_factor_auth_enabled = True


            else:
                user.one_factor_auth_enabled = False
# Speichere die Änderungen in der Datenbank
            user.save()
# Gib eine Erfolgsmeldung zurück
            return JsonResponse(status=200, data={'msg': "factor authentication toggled with success"})
# Wenn der Benutzer nicht existiert, gib eine Fehlermeldung zurück
        except User.DoesNotExist:
            return JsonResponse(status=404, data={"msg": "an error has occured on our end"})
# Logge den Fehler und gib eine Fehlermeldung zurück
        except Exception as e:
            logger.error(e)
            return JsonResponse(status=500, data={
                "msg": "an error has occured on our end"
            })



#Klasse LogEntryView

class LogEntryView(View):


    @classmethod
    def get(cls, request):
        # Die Seite holen, die der Benutzer anfordert
        page = request.GET.get('page', 1)
        # Die Aktion holen, die der Benutzer ausgeführt hat
        action = request.GET.get('action')
        if action:
 # Die Seite entsprechend der Aktion aktualisieren
            if action == "next":
                page = int(page) + 1
            else:
                page = int(page) - 1
 # Alle Logineinträge abrufen und nach Datum absteigend sortieren
        entries = LoginEntry.objects.order_by('-date')
 # Anzahl der anzuzeigenden Einträge pro Seite holen
        nb_records = request.session.get('nb_records', 5)
# Paginator-Objekt erstellen, um die Einträge auf mehrere Seiten zu verteilen
        paginator = Paginator(entries, nb_records)  
        try:
             # Die angeforderte Seite abrufen
            entries_pages = paginator.page(page)
             # Wenn die angeforderte Seite nicht existiert, die letzte Seite abrufen
        except EmptyPage:
            entries_pages = paginator.page(paginator.num_pages)
# Kontext erstellen und Vorlage mit den Einträgen rendern
        context = {
            'entries_pages': entries_pages,
        }


        return render(template_name='lock_web_interface/login_entries.html', request=request, context=context)
   
    @classmethod
    def post(cls, request):
 # Die Anzahl der anzuzeigenden Einträge aktualisieren und in der Sitzung speichern
        try:
            nb_records = request.POST.get('nb-records', 10)
            logger.info(nb_records)
            try:
                print("B")
                config = RecordConfig.objects.get()              
                config.nb_records = nb_records
            except RecordConfig.DoesNotExist:
                config = RecordConfig(nb_records=nb_records)
            config.save()


            request.session['nb_records'] = nb_records
            logger.info(request.session['nb_records'])
 # Die Logineinträge erneut rendern
            return cls.get(request)
        except Exception as e:
            logger.error(e)
            return JsonResponse(status=500, data={})



## Home.py
# Importieren von Django-Modulen
from django.contrib.auth import authenticate
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render
from django.contrib.auth import login as lg, logout as lo
import logging
# Importieren von Django-Modulen für URLs und Forms
from django.urls import reverse


from lock_web_interface.forms.user_form import AdminForm


logger = logging.getLogger(__name__)    # Logger für diese Datei erstellen


# Funktion, die die Startseite lädt
def home(request):
    return render(request, "lock_web_interface/home.html")


# Funktion, die den Login-Prozess verarbeitet
def login(request):
 # Wenn Anfrage-Methode GET ist, das Login-Formular anzeigen
    if request.method == "GET":
        return render(request, 'lock_web_interface/login.html')
# Wenn Anfrage-Methode POST ist, versuche den Benutzer anzumelden
    elif request.method == "POST":
 # Benutzername aus der Anfrage holen
        username = request.POST.get('username')
# Passwort aus der Anfrage holen
        password = request.POST.get('password')
# Benutzer authentifizieren
        user = authenticate(request, username=username, password=password)
# Wenn Benutzer authentifiziert und ein Admin ist
        if user and user.user_type == "ADMIN":
            lg(request, user)                        # Anmelden des Benutzers
            return HttpResponseRedirect(reverse('management')) # Weiterleitung auf die Management-Seite
        else:
# Loggen, dass der Login fehlgeschlagen ist
            logger.info('Login failed')
            context = {
                "error": "Email et/ou Mot de passe incorrect"  # Fehlermeldung für die Anzeige
            }
# Login-Formular mit Fehlermeldung anzeigen
            return render(request, 'lock_web_interface/login.html', context)
    else:
# Loggen, dass die Anfrage-Methode nicht erlaubt ist
        logger.info("method not allowed")
# HTTP-Fehlerantwort zurückgeben
        return HttpResponse(405)


# Funktion, die den Logout-Prozess verarbeitet
def logout(request):
   
    """
    This function deletes the current user session and log him out
    :param request:
    :return: return an HttpResponse
    """
    lo(request)
    return HttpResponseRedirect(reverse('login'))




### URL


from django.contrib import admin
from django.urls import path


from lock_web_interface.views import home, api, admin as management


urlpatterns = [
    path('admin/', admin.site.urls),
    path('', home.home, name="home"),
    path('home', home.home, name="home"),
    path('login', home.login, name="login"),
    path('logout', home.logout, name="logout"),
    path('signup', home.signup, name="signup"),
    path('management', management.ManagementView.as_view(), name="management"),
    path('management/users', management.UserView.as_view(), name="management_users"),
    path('management/toggle_auth', management.OneAuthUsersView.as_view(), name="management_toggle_auth"),
    path('management/login_entries', management.LogEntryView.as_view(), name="management_login_entries"),
    path('api/send_mail', api.send_mail_with_login_code, name="api_send_mail"),
    path('api/one_factor_auth', api.can_authenticate_with_one_factor, name="api_one_factor_auth"),
    path('api/login_entry', api.add_login_entry, name="api_login_entry"),
]
### API Funktionen
import base64
import logging
import random
from django.contrib.auth.models import User
from django.http import JsonResponse
from django.core.mail import send_mail
from lock_web_interface.models import LoginEntry, MyUser, RecordConfig
from django.shortcuts import render
from django.core.paginator import Paginator




logger = logging.getLogger(__name__)




def send_mail_with_login_code(request):
    if request.method == "POST":
        try:
            nfc = request.POST.get('nfc')
            print(nfc)
            user = MyUser.objects.get(nfc=nfc)
            password = ''.join([str(random.randint(0, 9)) for i in range(6)])
            send_mail(
                subject="Authentifizierungscode",
                from_email="",
                recipient_list=[user.email],
                message=f"Hallo! Ihr Authentifizierungscode ist: {password}",
                fail_silently=True
            )
            return JsonResponse(status=200, data={
                'msg': "mail with login code sent with success",
                'password': password
            })
        except Exception as e:
            logger.error(e)
            return JsonResponse(status=500, data={
                'msg': 'an error has occured on our end'
            })
    else:
        return JsonResponse(status=405, data={
            'msg': 'method not allowed'
        })






def can_authenticate_with_one_factor(request):
    if request.method == "POST":
        try:
            one_factor_code = request.POST.get('one_factor_code')
            one_factor_code = base64.b64encode(bytes(one_factor_code, 'utf-8'))
            user = MyUser.objects.get(one_factor_code=one_factor_code, one_factor_auth_enabled=True)
            if user:
               
                return JsonResponse(status=200, data={
                    'msg': 'one factor authentication enabled',
                    'one_factor': True,
                    'one_factor_code': base64.b64decode(bytes(user.one_factor_code[1:], 'utf-8')).decode()
                })
            else:
                return JsonResponse(status=200, data={
                    'msg': 'one factor authentication disabled',
                    'one_factor': False
                })
        except User.DoesNotExist:
            return JsonResponse(status=404, data={
                'msg': "a user with this username doesn't exist"
            })
        except Exception as e:
            logger.error(e)
            return JsonResponse(status=500, data={
                'msg': 'an error has occured on our end'
            })
    else:
        return JsonResponse(status=405, data={
            'msg': 'method not allowed'
        })




def add_login_entry(request):
    #login_records(request)
    check_login_entries(request)  
    if request.method == "POST":
        try:
            one_factor_code = request.POST.get('code')
            if(one_factor_code.isdigit()):
              one_factor_code = base64.b64encode(bytes(one_factor_code, 'utf-8'))
              print(one_factor_code)
              auth_type = request.POST.get('auth_type')
              print(auth_type)
              user = MyUser.objects.get(one_factor_code=one_factor_code)
              print(user)
              LoginEntry(
                user=user,
                auth_type=auth_type
                ).save()
            else:
              nfc=one_factor_code
              #nfc = base64.b64encode(bytes(one_factor_code, 'utf-8'))
              print(nfc)
              auth_type = request.POST.get('auth_type')
              print(auth_type)
              user = MyUser.objects.get(nfc=nfc)


              LoginEntry(
                user=user,
                auth_type=auth_type
                ).save()
           
            return JsonResponse(status=200, data={
                'msg': 'log entry saved with success'
            })
        except User.DoesNotExist:
            return JsonResponse(status=404, data={
                'msg': "a user with this username doesn't exist"
            })
        except Exception as e:
            logger.error(e)
            return JsonResponse(status=500, data={
                'msg': 'an error has occured on our end',
                'error': e
            })
    else:
        return JsonResponse(status=405, data={
            'msg': 'method not allowed'
        })


def check_login_entries(request):
    if request.method == 'POST':
       config = RecordConfig.objects.get()
       nb_records = config.nb_records
       nb = LoginEntry.objects.count()
       print("nb-records :", nb_records)
       print("entries: ", nb)
    if nb == nb_records:
          LoginEntry.objects.latest('-date').delete()
    if nb > nb_records:
          entries_to_delete = LoginEntry.objects.order_by('-date')[:(nb - nb_records+1)]
          for entry in entries_to_delete:
              entry.delete()
    elif nb<nb_records:
        nb_records=nb_records
        nb=nb




#################### HTML ###### HTML


<!--User Template–->


<form id="form-user" method="post" action="{% url 'management_users' %}">
    <fieldset>
        {{form.user_id}}
        <div class="form-group">
            <label class="form-label mt-4">{{form.first_name.label}}</label>
            {{form.first_name}}
            <div class="invalid-feedback">{{form.first_name.errors}}</div>
        </div>
        <div class="form-group">
            <label class="form-label mt-4">{{form.last_name.label}}</label>
            {{form.last_name}}
            <div class="invalid-feedback">{{form.last_name.errors}}</div>
        </div>
        <div class="form-group">
            <label class="form-label mt-4">{{form.email.label}}</label>
            {{form.email}}
            <div class="invalid-feedback">{{form.email.errors}}</div>
        </div>
        <div class="form-group">
            <label class="form-label mt-4">{{form.username.label}}</label>
            {{form.username}}
            <div class="invalid-feedback">{{form.username.errors}}</div>
        </div>
        <div class="form-group">
            <label class="form-label mt-4">{{form.one_factor_code.label}}</label>
            {{form.one_factor_code}}
            <div class="invalid-feedback">{{form.one_factor_code.errors}}</div>
        </div>
        <div class="form-group">
            <label class="form-label mt-4">{{form.nfc.label}}</label>
            {{form.nfc}}
            <div class="invalid-feedback">{{form.nfc.errors}}</div>
        </div>
        <button type="submit" id="button-form-user" class="btn btn-success">{{action_form}}</button>
        <button type="reset" class="btn btn-secondary" id="button-reset-form">Zurücksetzen</button>
    </fieldset>
</form>




< !-- Base Template -- > 


{% load static i18n %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Lock web interface </title>
    <link href="{% static 'libs/bootstrap/bootstrap.min.css' %}" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
    <script src="{% static 'libs/bootstrap/bootstrap.min.js' %}"></script>
    {% block css %}
      {% endblock css %}
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
  <div class="container-fluid">


    <div class="collapse navbar-collapse" id="navbarColor03">
      <ul class="navbar-nav me-auto">
        <li class="nav-item">
          <a class="nav-link active" href="{% url 'home' %}">Lock web interface
            <span class="visually-hidden">(current)</span>
          </a>
        </li>
      </ul>
      <div class="d-flex">
          {% if user.is_authenticated %}
            {{user.get_full_name}} &nbsp;
            <a class="btn btn-secondary my-2 my-sm-0" href="{% url 'logout' %}">Logout</a>&nbsp;
          {% else %}
           <a class="btn btn-secondary my-2 my-sm-0" href="{% url 'login' %}">Login</a>&nbsp;
           <a class="btn btn-secondary my-2 my-sm-0" href="{% url 'signup' %}">Signup</a>
          {% endif %}
      </div>
    </div>
  </div>
</nav>
    {% block content %}
    {% endblock content %}


    {% block js %}
    {% endblock js %}
</body>
</html>


<!-- HOME Template —->


{% extends 'lock_web_interface/base.html' %}
{% block css %}
    <style>
    .login-card{
        min-height: 300px;
        min-width: 700px;
        border-radius: 5px;
        border: 5px solid rgb(37, 173, 76);
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
    }
    .login-title{
        font-weight: bold;
        font-size: 60px;
        text-align: center;
        padding-top: 10px;
        padding-bottom: 10px;
        border-bottom: 5px solid rgb(46, 164, 58);
    }
    .form-login{
        margin: 3px
    }
    </style>
{% endblock %}
{% block content %}
    <div class="container-fluid background">
        <div class="login-card">
            <div class="login-title"> Einlogen </div>
            <div class="login-content">
                {{error}}
                <form class="form-login" action="{% url 'login'%}" method="post">
                    {% csrf_token %}
                    <div class="form-floating mb-3">
                      <input type="text" name="username" class="form-control" id="floatingInput" placeholder="nom d'utilisateur" required>
                      <label for="floatingInput">Benutzername</label>
                    </div>
                    <div class="form-floating mb-3">
                      <input type="password" name="password" class="form-control" placeholder="Mot de passe" required>
                      <label for="floatingInput">Password</label>
                    </div>
                    <button type="submit" class="btn btn-success">Senden</button>
                </form>
            </div>
        </div>
    </div>
{% endblock %}


<!-- Management Template -->


{% extends 'lock_web_interface/base.html' %}
{% block css %}
<style>
    .divider{
        height: 40px;
        width: 2px ;
    }
    .toast-right{
        position: fixed;
        right: 50px;
        top: 50px;
        width: 100px;
        min-height: 50px;
        border-radius: 4px;
    }
</style>
{% endblock %}
{% block content %}


<ol class="breadcrumb">
  <li class="breadcrumb-item active"><a href="{% url 'management' %}">Management</a></li>
</ol>


<div class="container">
    <div class="row">
        <div class="col-md-6">
            <h2 style="font-weight: bold" class=""> Eingetragene Benutzer</h2>
            <table class="table table-hover">
              <thead>
                <tr>
                  <th scope="col">Name</th>
                    <th scope="col">Email</th>
                    <th scope="col">NFC</th>
                    <th scope="col">Ein Faktor-Auth</th>
                  <th scope="col">Actions</th>
                </tr>
              </thead>
              <tbody>
                {% for user in user_pages %}
                <tr>
                  <th scope="row">{{user.get_full_name}}</th>
                  <td>{{user.email}}</td>
                    <td>{{user.nfc|default:""}}</td>
                    <td><a class="toggle-auth" user-id="{{user.id}}" toggled="{{user.one_factor_auth_enabled}}">{{user.one_factor_auth_enabled}}</a></td>
                    <td><a class="user-edit" user-id="{{user.id}}"> Edit</a>&nbsp;<a class="user-delete" user-id="{{user.id}}"> Löschen</a>&nbsp;</td>
                </tr>
              {% endfor %}
              </tbody>
            </table>
            <div>
              <ul class="pagination">
                  {% if user_pages.has_previous %}
                    <li class="page-item">
                      <a class="page-link" href="?page={{user_pages.number}}&action=previous">&laquo;</a>
                    </li>
                  {% endif %}
                <li class="page-item active">
                  <a class="page-link" href="#">{{user_pages.number}} Von {{user_pages.paginator.num_pages}}</a>
                </li>
                  {% if user_pages.has_next %}
                    <li class="page-item">
                      <a class="page-link" href="?page={{user_pages.number}}&action=next">&raquo;</a>
                    </li>
                  {% endif %}
              </ul>
            </div>
            <button class="btn btn-secondary my-2 my-sm-0">
                <a href="{% url 'management_login_entries' %}" style="text-decoration: none"> Zum Protokoll</a>
            </button>
        </div>
        <div class="col-md-2 divider"></div>
        <div class="col-md-5 ">
            <h2 style="font-weight: bold" class=""> Benutzer hinzufügen / Bearbeiten</h2>
            <div class="block-edit-user">
                {% include 'lock_web_interface/management/user_template.html' %}
            </div>
        </div>
    </div>
</div>
{% endblock %}


{% block js %}
<script type="text/javascript">
               $(document).ready(function (){


// Funktion, um den Wert des Cookies 'csrftoken' auszulesen
function getCookie(name) {
    var cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        var cookies = document.cookie.split(';');
        for (var i = 0; i < cookies.length; i++) {
            var cookie = jQuery.trim(cookies[i]);
            // Überprüfung, ob der Name des Cookies mit dem gewünschten übereinstimmt
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}


// Funktion, um eine "Toast"-Nachricht anzuzeigen
function toast(msg, purpose){
    let t = `<div class="toast-right" class="${purpose}">${msg}</div>`
    $('body').append(t)
}


// Auslesen des CSRF-Tokens aus dem Cookie
var csrftoken = getCookie('csrftoken');


// Funktion, um das Formular zurückzusetzen
function bindFormReset(){
    setTimeout(()=>{
        $('#button-reset-form').unbind('click')
        $('#button-reset-form').bind('click', function (){
            for ( let elt of $("form input")){
                elt.value = ""
            }
        })
    },500)
}


// Binden der Funktion zum Zurücksetzen des Formulars
bindFormReset()


// Funktion, um das Formular-Submit-Event zu binden
function bind_form_event(){
    $('#form-user').on('submit', function (e){
    e.stopPropagation()
    e.preventDefault()


    // AJAX-Anfrage zum Speichern der Benutzerdaten
    $.ajax({
        url: "{% url 'management_users' %}",
        method: "POST",
        headers: {'X-CSRFToken': csrftoken},
        dataType: "json",
        data: {
            'user_id': $('#id_user_id').val(),
            "first_name": $('#id_first_name').val(),
            "last_name": $('#id_last_name').val(),
            "email": $('#id_email').val(),
            "username": $('#id_username').val(),
            "one_factor_code": $('#id_one_factor_code').val(),
            "password1": $('#id_password1').val(),
            "password2": $('#id_password2').val(),
            "nfc": $('#id_nfc').val(),
        },


        // Erfolgreiche Speicherung der Daten
        success: function (res){
            console.log(res)
            window.location.reload()
        },


        // Fehler beim Speichern der Daten
        error: function (err){
            console.log(err.responseJSON.msg)
            $('.block-edit-user').html(err.responseJSON.html)
        }
    })
})
}


// Binden des Formular-Submit-Events
bind_form_event()


            $('.toggle-auth').each(function (){
    // Wenn auf ein Element mit der Klasse "toggle-auth" geklickt wird:
    $(this).on('click', function (){
        // Hole die Benutzer-ID aus dem "user-id"-Attribut des Elements:
        let userId = $(this).attr('user-id')
        // Hole den Wert des "toggled"-Attributs des Elements:
        let toggled = $(this).attr('toggled')
        // Führe eine AJAX-Anfrage an die URL aus, die durch die URL-Tag in Django generiert wird:
        $.ajax({
            url: "{% url 'management_toggle_auth' %}",
            // Verwende die POST-Methode für die Anfrage:
            method: "post",
            // Füge den CSRF-Token zum Header der Anfrage hinzu:
            headers: {'X-CSRFToken': csrftoken},
            // Erwarte eine JSON-Antwort von der Serverseite:
            dataType: "json",
            // Übergebe die Benutzer-ID und den Wert von "toggled" als Daten für die Anfrage:
            data: {
                "id":userId,
                "toggled": toggled
            },
            // Wenn die Anfrage erfolgreich war, lade die Seite neu:
            success: function (res){
                window.location.reload()
            },
            // Wenn es einen Fehler gab, logge die Fehlermeldung in der Konsole:
            error: function (err){
                console.log(err.responseJSON.msg)
            }
        })
    })
})
$('.user-edit').each(function (){
    // Wenn auf ein Element mit der Klasse "user-edit" geklickt wird:
    $(this).on('click', function (){
        // Hole die Benutzer-ID aus dem "user-id"-Attribut des Elements:
        let userId = $(this).attr('user-id')
        // Führe eine AJAX-Anfrage an die URL aus, die durch die URL-Tag in Django generiert wird:
        $.ajax({
            url: "{% url 'management_users' %}",
            // Verwende die GET-Methode für die Anfrage:
            method: "get",
            // Übergebe die Benutzer-ID als Daten für die Anfrage:
            data: {
                "id":userId,
            },
            // Wenn die Anfrage erfolgreich war, füge den HTML-Code der Antwort in ein Element mit der Klasse "block-edit-user" ein:
            success: function (res){
                $('.block-edit-user').html(res.html)


                // Binde Formular-Events an:
                bind_form_event()
                // Binde das Zurücksetzen-Event des Formulars an:
                bindFormReset()
            },
            // Wenn es einen Fehler gab, logge die Fehlermeldung in der Konsole:
            error: function (err){
                console.log(err.responseJSON.msg)
            }
        })
    })
})
$('.user-delete').each(function (){
    // Wenn auf ein Element mit der Klasse "user-delete" geklickt wird:
    $(this).on('click', function (){
        // Hole die Benutzer-ID aus dem "user-id"-Attribut des Elements:
        let userId = $(this).attr('user-id')
        // Führe eine AJAX-Anfrage an die URL aus, die durch die URL-Tag in Django generiert wird:
        $.ajax({
            url: "{% url 'management_users' %}",
            // Verwende die DELETE-Methode für die Anfrage:
            method: "delete",
            // Füge den CSRF-Token zum Header der Anfrage
                   headers: {'X-CSRFToken': csrftoken},
                    data: {
                        "id":userId,
                    },
                    success: function (res){
                        window.location.reload()
                    },
                    error: function (err){
                        console.log(err.responseJSON.msg)
                    }
                })
            })
        })


    })
</script>
{% endblock %}








<!-- Login_entries Template -->


{% extends 'lock_web_interface/base.html' %}
{% load humanize %}
{% block content %}
<ol class="breadcrumb">
  <li class="breadcrumb-item active"><a href="{% url 'management' %}">Management</a></li>
    <li class="breadcrumb-item active">ProtoKoll</li>
</ol>


<div class="container">
    <div class="row">
        <div class="col-md-6">
            <h2 style="font-weight: bold" class=""> ProtoKoll</h2>
            <table class="table table-hover">
              <thead>
                <tr>
                  <th scope="col">Benutzername</th>
                  <th scope="col"> Datum</th>
                  <th scope="col">Uhrzeit</th>
                  <th scope="col">Authentifizierungsverfahren</th>
                </tr>
              </thead>
              <tbody>
                {% for entry in entries_pages %}
                <tr>
                    <td scope="row">{{entry.user.get_full_name}}</td>
                    <td scope="row">{{entry.date|date:"d.m.Y"}}</td>
                    <td scope="row">{{entry.date|date:"H:i:s"}}</td>
                    <td>{{entry.auth_type}}</td>
                </tr>
              {% endfor %}
              </tbody>
            </table>
            <div>
              <ul class="pagination">
                  {% if entries_pages.has_previous %}
                    <li class="page-item disabled">
                      <a class="page-link" href="?page={{entries_pages.number}}&action=previous">&laquo;</a>
                    </li>
                  {% endif %}
                <li class="page-item active">
                  <a class="page-link" href="#">{{entries_pages.number}} sur {{entries_pages.paginator.num_pages}}</a>
                </li>
                  {% if entries_pages.has_next %}
                    <li class="page-item">
                      <a class="page-link" href="?page={{entries_pages.number}}&action=next">&raquo;</a>
                    </li>
                  {% endif %}
              </ul>
            </div>
            <form method="POST" action="{% url 'management_login_entries' %}">
              {% csrf_token %}
            <div class="form-row align-items-center">
              <div class="col-sm-3 my-1">
                <label class="sr-only" for="nb-records">Records</label>
                <input type="text" class="form-control" id="nb-records" name="nb-records">
              </div>
              <div class="col-auto my-1">
                <button type="submit" class="btn btn-primary">Submit</button>
              </div>
            </div>
          </form>
        </div>
    </div>
</div>
{% endblock %}
